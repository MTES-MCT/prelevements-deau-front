'use client'

import {useEffect, useState} from 'react'

import Button from '@codegouvfr/react-dsfr/Button'
import {Typography} from '@mui/material'
import {orderBy} from 'lodash-es'

import ExploitationsListItem from '../exploitations/exploitations-list-item.js'

import Loading from '@/app/points-prelevement/[id]/loading.js'

function getPreleveurInfo(preleveur) {
  if (!preleveur) {
    return null
  }

  if (preleveur.nom) {
    return `${preleveur.civilite || ''} ${preleveur.nom} ${preleveur.prenom || ''}`
  }

  return preleveur.raison_sociale || preleveur.sigle
}

const PointExploitations = ({pointPrelevement, exploitations}) => {
  const [isLoading, setIsLoading] = useState(true)
  const [expanded, setExpanded] = useState(false)
  const [error, setError] = useState(null)
  const [exploitationsWithVolumes, setExploitationsWithVolumes] = useState([])

  const handleChange = panel => (event, isExpanded) => {
    setExpanded(isExpanded ? panel : false)
  }

  useEffect(() => {
    async function sortExploitations() {
      setIsLoading(true)
      try {
        const orderedByDateFinExploitations = exploitations.sort((a, b) => {
          if (a.date_fin === undefined) {
            return -1
          }

          if (b.date_fin === undefined) {
            return 1
          }

          return b.id_exploitation - a.id_exploitation
        })

        const orderedExploitationsWithVolumes = orderedByDateFinExploitations.sort((a, b) => {
          if (a.statut === 'En activité' && b.statut === 'En activité') {
            return new Date(b.date_debut) - new Date(a.date_debut)
          }

          if (a.statut === 'En activité' && b.statut !== 'En activité') {
            return -1
          }

          if (a.statut !== 'En activité' && b.statut === 'En activité') {
            return 1
          }

          return 0
        })

        setExploitationsWithVolumes(orderedExploitationsWithVolumes)
        setIsLoading(false)
      } catch (error) {
        console.error(error)
        setError(error)
      }
    }

    sortExploitations()
  }, [exploitations])

  return (
    <div className='flex flex-col gap-4'>
      <div className='flex justify-between items-center gap-4'>
        <Typography variant='h5'>
          Exploitations
        </Typography>
        <Button
          className='text-center'
          priority='secondary'
          iconId='fr-icon-add-line'
          linkProps={{
            href: `/exploitations/new?idPoint=${pointPrelevement.id_point}`
          }}
        >
          Créer une exploitation
        </Button>
      </div>
      <div>
        {!isLoading && exploitationsWithVolumes.length > 0 && exploitationsWithVolumes.map(exploitation => {
          const documents = exploitation.documents.map(document => ({
            ...document,
            dateSignature: new Date(document.date_signature)
          }))
          const orderedDocuments = orderBy(documents, ['dateSignature'], ['desc'])
          const preleveur = pointPrelevement.preleveurs.find(p => p._id === exploitation.preleveur)

          return (
            <ExploitationsListItem
              key={exploitation._id}
              exploitation={exploitation}
              documents={orderedDocuments}
              nomPreleveur={getPreleveurInfo(preleveur)}
              isExpanded={expanded === exploitation.id_exploitation}
              setIsExpanded={handleChange(exploitation.id_exploitation)}
              error={error}
            />
          )
        })}
        {exploitationsWithVolumes.length === 0 && !isLoading && (
          <div>
            <i>Pas d’exploitation</i>
          </div>
        )}
        {isLoading && (
          <Loading />
        )}
      </div>
    </div>
  )
}

export default PointExploitations
