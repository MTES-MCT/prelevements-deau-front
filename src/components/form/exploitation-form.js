/* eslint-disable camelcase */
'use client'

import {useEffect, useState} from 'react'

import {Input} from '@codegouvfr/react-dsfr/Input'
import {SearchBar} from '@codegouvfr/react-dsfr/SearchBar'
import {Select} from '@codegouvfr/react-dsfr/SelectNext'
import {Tooltip} from '@codegouvfr/react-dsfr/Tooltip'
import dynamic from 'next/dynamic'

import ReglesForm from './regles-form.js'

import SearchAutocomplete from '@/components/form/search-autocomplete.js'
import AccordionCentered from '@/components/ui/accordion-centered.js'

const DynamicCheckbox = dynamic(
  () => import('@codegouvfr/react-dsfr/Checkbox'),
  {ssr: false}
)

function displayPreleveur(preleveur) {
  if (!preleveur) {
    return
  }

  if (preleveur.nom) {
    return `${preleveur.civilite || ''} ${preleveur.nom} ${preleveur.prenom}`
  }

  if (preleveur.sigle) {
    return preleveur.sigle
  }

  if (preleveur.raison_sociale) {
    return preleveur.raison_sociale
  }
}

const statutsExploitation = [
  'En activité',
  'Terminée',
  'Abandonnée',
  'Non renseigné'
]

const usagesExploitation = [
  'Eau potable',
  'Agriculture',
  'Camion citerne',
  'Eau embouteillée',
  'Hydroélectricité',
  'Industrie',
  'Thermalisme',
  'Non renseigné',
  'Autre'
]

const ExploitationForm = ({exploitation, points, preleveurs, setExploitation, idPoint}) => {
  const [isExpanded, setIsExpanded] = useState(exploitation?.regles.length > 0)
  const [hasUsagesChanged, setHasUsagesChanged] = useState(false)
  const [isStatutAbandonnee, setIsStatutAbandonnee] = useState(exploitation?.statut === 'Abandonnée')
  const initialUsages = exploitation?.usages || []
  const [usages, setUsages] = useState(exploitation?.usages || [])
  const defaultPoint = points.find(p => p._id === (exploitation?.point || idPoint))
  const defaultPreleveur = preleveurs.find(p => p._id === exploitation?.preleveur)

  const handleUsages = (e, usage) => {
    setUsages(prev => {
      const newUsages = e.target.checked
        ? [...prev, usage]
        : prev.filter(u => u !== usage)

      setHasUsagesChanged(
        newUsages.length !== initialUsages.length
          || !newUsages.every(u => initialUsages.includes(u))
      )

      return newUsages
    })
  }

  useEffect(() => {
    if (hasUsagesChanged) {
      setExploitation(prev => ({...prev, usages}))
    }
  }, [usages, setExploitation, hasUsagesChanged])

  return (
    <div>
      <div className='w-full grid grid-cols-2 gap-4 pb-5'>
        <div className='pb-5'>
          <p className='pb-2'>Associer un point de prélèvement *</p>
          <SearchBar
            label='Rechercher un point de prélèvement'
            renderInput={({className, id, placeholder, type}) => (
              <SearchAutocomplete
                options={points.map(point => ({
                  point,
                  label: `${point.nom} - ${point.id_point}`
                }))}
                defaultValue={defaultPoint
                  ? `${defaultPoint.nom} - ${defaultPoint.id_point}`
                  : null}
                className={className}
                id={id}
                placeholder={placeholder}
                type={type}
                onChange={(e, value) => setExploitation(prev => ({
                  ...prev,
                  point: value?.point?._id
                }))}
              />
            )}
          />
        </div>
        <div className='pb-5'>
          <p className='pb-2'>Associer un préleveur *</p>
          <SearchBar
            label='Rechercher un préleveur'
            renderInput={({className, id, placeholder, type}) => (
              <SearchAutocomplete
                options={preleveurs.map(preleveur => ({
                  preleveur,
                  label: displayPreleveur(preleveur)
                }))}
                defaultValue={defaultPreleveur
                  ? displayPreleveur(defaultPreleveur)
                  : null}
                className={className}
                id={id}
                placeholder={placeholder}
                type={type}
                onChange={(e, value) => setExploitation(prev => ({
                  ...prev,
                  preleveur: value?.preleveur?._id
                }))}
              />
            )}
          />
        </div>
      </div>
      <div className='w-full grid grid-cols-2 gap-4'>
        <Input
          label='Début d’exploitation *'
          nativeInputProps={{
            type: 'date',
            defaultValue: exploitation?.date_debut,
            onChange: e => setExploitation(prev => ({...prev, date_debut: e.target.value}))
          }}
        />
        <Input
          label='Fin d’exploitation'
          nativeInputProps={{
            type: 'date',
            defaultValue: exploitation?.date_fin,
            onChange: e => setExploitation(prev => ({...prev, date_fin: e.target.value}))
          }}
        />
      </div>
      <Select
        label={
          <>
            <span className='pr-2'>Statut *</span>
            <Tooltip
              kind='hover'
              title={
                <>
                  <p className='p-2'><b><u>En activité</u> :</b> Exploitation qui fait actuellement encore l’objet de prélèvement.</p>
                  <p className='p-2'><b><u>Terminée</u> :</b> Exploitation arrêtée sans que cela soit dû à une raison technique particulière.</p>
                  <p className='p-2'><b><u>Abandonnée</u> :</b> Il y a une raison technique qui ne permet plus l’exploitation du point de prélèvement pour l’usage visé (ex : contamination par les pesticides).</p>
                  <p className='p-2'><b><u>Non renseigné</u> :</b> Pas d’information sur l’activité de l’exploitation.</p>
                </>
              }
            />
          </>
        }
        placeholder='Sélectionner un statut'
        nativeSelectProps={{
          defaultValue: exploitation?.statut,
          onChange(e) {
            setExploitation(prev => ({
              ...prev,
              statut: e.target.value
            }))
            setIsStatutAbandonnee(e.target.value === 'Abandonnée')
          }
        }}
        options={statutsExploitation.map(statut => ({
          value: statut,
          label: statut
        }))}
      />
      {isStatutAbandonnee && (
        <Input
          textArea
          label='Raison abandon'
          placeholder='Indiquer la raison de l’abandon'
          nativeTextAreaProps={{
            defaultValue: exploitation?.raison_abandon,
            onChange: e => setExploitation(prev => ({...prev, raison_abandon: e.target.value}))
          }}
        />
      )}
      <DynamicCheckbox
        small
        legend='Usages *'
        options={usagesExploitation.map(usage => ({
          value: usage,
          label: usage,
          nativeInputProps: {
            defaultChecked: usages.includes(usage),
            onChange: e => handleUsages(e, usage)
          }
        }))}
        orientation='horizontal'
      />
      <Input
        textArea
        label='Remarque'
        nativeTextAreaProps={{
          placeholder: 'Entrer une remarque',
          defaultValue: exploitation?.remarque,
          onChange: e => setExploitation(prev => ({...prev, remarque: e.target.value}))
        }}
      />
      <AccordionCentered
        isExpanded={isExpanded}
        setIsExpanded={setIsExpanded}
        label='la gestion des règles'
      >
        <ReglesForm defaultRegles={exploitation?.regles} setExploitation={setExploitation} />
      </AccordionCentered>
    </div>
  )
}

export default ExploitationForm
