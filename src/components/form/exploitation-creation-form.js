/* eslint-disable camelcase */
'use client'

import {useEffect, useState} from 'react'

import Button from '@codegouvfr/react-dsfr/Button'
import {Typography} from '@mui/material'
import {useRouter} from 'next/navigation'

import {createExploitation} from '@/app/api/points-prelevement.js'
import ExploitationForm from '@/components/form/exploitation-form.js'
import {emptyStringToNull} from '@/utils/string.js'

const ExploitationCreationForm = ({idPoint, points, preleveurs}) => {
  const router = useRouter()

  const [error, setError] = useState(null)
  const [validationErrors, setValidationErrors] = useState([])
  const [exploitation, setExploitation] = useState({
    point: idPoint || '',
    preleveur: '',
    date_debut: '',
    statut: '',
    documents: [],
    regles: [],
    modalites: []
  })
  const [isDisabled, setIsDisabled] = useState(true)

  const handleSubmit = async () => {
    setError(null)
    setValidationErrors([])

    try {
      const cleanedExploitation = emptyStringToNull(exploitation)
      const response = await createExploitation(cleanedExploitation)

      if (response.code === 400) {
        if (response.validationErrors) {
          setValidationErrors(response.validationErrors)
        } else {
          setError(response.message)
        }
      } else {
        router.push(`/exploitations/${response.id_exploitation}`)
      }
    } catch (error) {
      setError(error.message)
    }
  }

  useEffect(() => {
    setIsDisabled(!(exploitation.point && exploitation.preleveur && exploitation.date_debut && exploitation.statut))
  }, [exploitation])

  return (
    <div>
      <Typography variant='h3' sx={{pb: 5}}>
        Création d&apos;une exploitation
      </Typography>
      <ExploitationForm
        idPoint={idPoint}
        setExploitation={setExploitation}
        points={points}
        preleveurs={preleveurs}
      />
      {error && (
        <div className='text-center p-5 text-red-500'>
          <p><b>Un problème est survenu :</b></p>
          {error}
        </div>
      )}
      {validationErrors?.length > 0 && (
        <div className='text-center p-5 text-red-500'>
          <p><b>{validationErrors.length === 1 ? 'Problème de validation :' : 'Problèmes de validation :'}</b></p>
          {validationErrors.map(err => (
            <p key={err.message}>{err.message}</p>
          )
          )}
        </div>
      )}
      <div className='w-full flex justify-center p-5 mb-8'>
        <Button disabled={isDisabled} onClick={handleSubmit}>
          Valider la création de l’exploitation
        </Button>
      </div>
    </div>
  )
}

export default ExploitationCreationForm
